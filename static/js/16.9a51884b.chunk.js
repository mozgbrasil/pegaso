(this["webpackJsonp@mozg/react-pegaso"]=this["webpackJsonp@mozg/react-pegaso"]||[]).push([[16],{216:function(e,a,r){e.exports=r.p+"static/media/diamond.ab7b6e3a.glb"},217:function(e,a,r){},598:function(e,a,r){"use strict";r.r(a);var n=r(12),t=r(0),o=r.n(t),i=r(571),c=r(54),l=r(215),s=r(216),m=r.n(s),d=r(8),f=r(9),u=r(10),v=function(e){Object(f.a)(RefractionMaterial,e);var a=Object(u.a)(RefractionMaterial);function RefractionMaterial(e){return Object(d.a)(this,RefractionMaterial),a.call(this,{vertexShader:"varying vec3 worldNormal;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }",fragmentShader:"varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }",side:c.BackSide})}return RefractionMaterial}(c.ShaderMaterial),p=function(e){Object(f.a)(RefractionMaterial,e);var a=Object(u.a)(RefractionMaterial);function RefractionMaterial(e){var r;return Object(d.a)(this,RefractionMaterial),(r=a.call(this,{vertexShader:"varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n\n        vec4 worldPosition = modelMatrix * vec4( position, 1.0);\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize(worldPosition.xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }",fragmentShader:"uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      \n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      \n      float ior = 1.5;\n      float a = 0.33;\n      \n      vec3 fogColor = vec3(1.0);\n      vec3 reflectionColor = vec3(1.0);\n      \n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow( 1.08 + dot( viewDirection, worldNormal), 10.0 );\n      }\n      \n      void main() {\n        // screen coordinates\n        vec2 uv = gl_FragCoord.xy / resolution;\n      \n        // sample backface data from texture\n        vec3 backfaceNormal = texture2D(backfaceMap, uv).rgb;\n      \n        // combine backface and frontface normal\n        vec3 normal = worldNormal * (1.0 - a) - backfaceNormal * a;\n      \n        // calculate refraction and apply to uv\n        vec3 refracted = refract(viewDirection, normal, 1.0/ior);\n        uv += refracted.xy;\n      \n        // sample environment texture\n        vec4 tex = texture2D(envMap, uv);\n      \n        // calculate fresnel\n        float fresnel = fresnelFunc(viewDirection, normal);\n      \n        vec4 color = tex;\n      \n        // apply fresnel\n        color.rgb = mix(color.rgb, reflectionColor, fresnel);\n      \n        gl_FragColor = vec4(color.rgb, 1.0);\n      }"})).uniforms={envMap:{value:e.envMap},backfaceMap:{value:e.backfaceMap},resolution:{value:e.resolution}},r}return RefractionMaterial}(c.ShaderMaterial);r(217);function Background(e){console.log("Background - props:",e);var a=e.image,r=Object(i.d)(),n=r.viewport,l=r.aspect,s=Object(i.c)(c.TextureLoader,a);Object(t.useMemo)((function(){return s.minFilter=c.LinearFilter}),[]);var m=3800*(l>5e3/3800?n.width/5e3:n.height/3800),d=5e3*(l>5e3/3800?n.width/5e3:n.height/3800);return o.a.createElement("mesh",{layers:1,scale:[d,m,1]},o.a.createElement("planeBufferGeometry",{attach:"geometry"}),o.a.createElement("meshBasicMaterial",{attach:"material",map:s,depthTest:!1}))}function Diamonds(e){console.log("Diamonds - props:",e);var a=Object(i.d)(),r=a.size,s=a.viewport,d=a.gl,f=a.scene,u=a.camera,h=a.clock,M=Object(t.useRef)(),g=Object(i.c)(l.a,m.a),b=Object(t.useMemo)((function(){var e=new c.WebGLRenderTarget(r.width,r.height),a=new c.WebGLRenderTarget(r.width,r.height);return[e,a,new v,new p({envMap:e.texture,backfaceMap:a.texture,resolution:[r.width,r.height]})]}),[r]),w=Object(n.a)(b,4),x=w[0],N=w[1],y=w[2],j=w[3],O=Object(t.useMemo)((function(){return new c.Object3D}),[]),k=Object(t.useMemo)((function(){return new Array(80).fill().map((function(e,a){return{position:[a<5?0:s.width/2-Math.random()*s.width,40-40*Math.random(),a<5?26:10-20*Math.random()],factor:.1+Math.random(),direction:Math.random()<.5?-1:1,rotation:[Math.sin(Math.random())*Math.PI,Math.sin(Math.random())*Math.PI,Math.cos(Math.random())*Math.PI]}}))}),[]);return Object(i.b)((function(){k.forEach((function(e,a){var r=h.getElapsedTime();e.position[1]-=e.factor/5*e.direction,(1===e.direction?e.position[1]<-50:e.position[1]>50)&&(e.position=[a<5?0:s.width/2-Math.random()*s.width,50*e.direction,e.position[2]]);var n=e.position,t=e.rotation,o=e.factor;O.position.set(n[0],n[1],n[2]),O.rotation.set(t[0]+r*o,t[1]+r*o,t[2]+r*o),O.scale.set(1+o,1+o,1+o),O.updateMatrix(),M.current.setMatrixAt(a,O.matrix)})),M.current.instanceMatrix.needsUpdate=!0,d.autoClear=!1,u.layers.set(1),d.setRenderTarget(x),d.render(f,u),u.layers.set(0),M.current.material=y,d.setRenderTarget(N),d.clearDepth(),d.render(f,u),u.layers.set(1),d.setRenderTarget(null),d.render(f,u),d.clearDepth(),u.layers.set(0),M.current.material=j,d.render(f,u)}),1),o.a.createElement("instancedMesh",{ref:M,args:[null,null,k.length]},o.a.createElement("bufferGeometry",Object.assign({dispose:!1,attach:"geometry"},g.__$[1].geometry)),o.a.createElement("meshBasicMaterial",{attach:"material"}))}a.default=function App(e){return console.log("App - props:",e),o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{id:"floating-diamonds",className:""},o.a.createElement(i.a,{camera:{fov:50,position:[0,0,30]}},o.a.createElement(t.Suspense,{fallback:null},o.a.createElement(Background,{image:e.image}),o.a.createElement(Diamonds,null)))))}}}]);